{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"uvicorn_configurable - version 0.1.0","text":"<p>Facilitates file-based configuration for <code>uvicorn</code>, a Python ASGI web server, through the use of an <code>application_settings</code> ConfigSection.</p> <p>This project is licensed under the terms of the MIT license.</p>"},{"location":"1-Installation/","title":"Install the package","text":"<p><code>uvicorn_configurable</code> is available for pypi and can hence be installed with pip or poetry. The package is not available on conda.</p> <p>If you don't want to wait for a release and prefer to try the develop version, then you can install from our repo.</p> WindowsLinux <pre><code># From pypi with pip:\npy -m pip install -U uvicorn_configurable\n\n# From pypi with poetry:\npoetry add uvicorn_configurable\n\n# From the repo with pip:\npy -m pip install git+https://github.com/StockwatchDev/uvicorn_configurable#develop\n\n# From the repo with poetry:\npoetry add git+https://github.com/StockwatchDev/uvicorn_configurable#develop\n</code></pre> <pre><code># From pypi:\npython -m pip install -U uvicorn_configurable\n\n# From pypi with poetry:\npoetry add uvicorn_configurable\n\n# From the repo with pip:\npython -m pip install git+https://github.com/StockwatchDev/uvicorn_configurable#develop\n\n# From the repo with poetry:\npoetry add git+https://github.com/StockwatchDev/uvicorn_configurable#develop\n</code></pre> <p>We have direct dependencies on the following package(s):</p> <ul> <li>application_settings</li> </ul>"},{"location":"2-Basic_usage/","title":"Basic usage","text":"<p>The <code>uvicorn_configurable</code> package is designed to simplify the configuration of the <code>uvicorn</code> ASGI web server implementation for Python. This guide explains how to use <code>uvicorn_configurable</code> in your Python application.</p>"},{"location":"2-Basic_usage/#setting-up-configuration","title":"Setting Up Configuration","text":""},{"location":"2-Basic_usage/#configuration-module","title":"Configuration Module","text":"<p>Define a module to load and manage the configuration of your application. For example, <code>config.py</code>:</p> <pre><code>from application_settings import ConfigBase, config_filepath_from_cli, dataclass\nfrom uvicorn_configurable import UvicornConfigSection\n\n@dataclass(frozen=True)\nclass ExampleConfig(ConfigBase):\n    \"\"\"Config for the application.\"\"\"\n\n    uvicorn: UvicornConfigSection = UvicornConfigSection()\n\n# Load config.\nconfig_filepath_from_cli(ExampleConfig, load=True)\n</code></pre> <p>This module uses <code>application_settings</code> to load the configuration from file.</p>"},{"location":"2-Basic_usage/#configuration-file","title":"Configuration File","text":"<p>Create a <code>config.toml</code> file to configure your <code>uvicorn</code> setup. That file should at the very least specify an item <code>app</code> in a section <code>[uvicorn.application]</code>. Here is an example:</p> <pre><code>[uvicorn.application]\napp = \"main:app\"\n\n[uvicorn.production]\nworkers = 4\n\n[uvicorn.http]\nset_default_forwarded_allow_ips = \"false\"\nforwarded_allow_ips = [ '*' ]\n\n[uvicorn.socket_binding]\nhost = \"localhost\"\nport = 6543\n</code></pre> <p>This file defines:</p> <ul> <li>The ASGI app that will be served;</li> <li>The number of workers that will be started</li> <li>The list of IP Addresses to trust with proxy headers (here: all);</li> <li>The host and port to use for serving.</li> </ul>"},{"location":"2-Basic_usage/#using-a-configured-uvicorn","title":"Using a configured uvicorn","text":"<p>Here's a main script (<code>__main__.py</code>) and a supporting module (<code>main.py</code>) to demonstrate the server behavior. The supporting module shows in the <code>main</code> function how the method <code>as_uvicorn_config_dict()</code> is used to convert the dataclass instance into a dictionary that can be used to configure <code>uvicorn</code>.</p>"},{"location":"2-Basic_usage/#__main__py","title":"<code>__main__.py</code>","text":"<pre><code>\"\"\"Call the main function, which runs a configured uvicorn process.\n\"\"\"\n\nimport config  # pylint: disable=unused-import  # isort: skip\n\nimport sys\n\nfrom main import main\n\nsys.exit(main())\n</code></pre>"},{"location":"2-Basic_usage/#mainpy","title":"<code>main.py</code>","text":"<pre><code>\"\"\"Main function\"\"\"\n\nimport uvicorn\n\nfrom config import ExampleConfig\n\n\nasync def app(scope, receive, send):  # type: ignore  # pylint: disable=unused-argument\n    \"\"\"Dummy app\"\"\"\n\n    assert scope[\"type\"] == \"http\"\n\n    await send(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": 200,\n            \"headers\": [\n                [b\"content-type\", b\"text/plain\"],\n            ],\n        }\n    )\n    await send(\n        {\n            \"type\": \"http.response.body\",\n            \"body\": b\"Hello, world!\",\n        }\n    )\n\n\ndef main() -&gt; int:\n    \"\"\"Run a simple uvicorn process that is configured with uvicorn_configurable\"\"\"\n    cfg = ExampleConfig.get().uvicorn.as_uvicorn_config_dict()\n    uvicorn.run(**cfg)\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"2-Basic_usage/#output-example","title":"Output Example","text":"<p>Depending on your <code>config.toml</code> settings, you will see:</p> <ul> <li>Logs in the console stating that one or more workers have been started.</li> <li>A message <code>Hello world!</code> in the web browser when opening the configured host and port.</li> <li>Logs in the console what requests have been made and what the response has been.</li> </ul>"},{"location":"3-Configuration/","title":"Configuration Options","text":"<p>This document provides a tabular overview of the configuration options available in the <code>uvicorn_configurable</code> module. For clarity, the division into subsections as done in the uvicorn documentation is followed here as well. The description of the options is taken from the  uvicorn documentation, with minor modifications where needed.</p>"},{"location":"3-Configuration/#application","title":"Application","text":"Option Type Default Description app str \"\" The ASGI application to run, in the format <code>&lt;module&gt;:&lt;attribute&gt;</code>. Set to <code>\"\"</code> if supplying the app instance. factory bool False Whether to treat <code>app</code> as an application factory, i.e., a <code>() -&gt; &lt;ASGI app&gt;</code> callable."},{"location":"3-Configuration/#socketbinding","title":"SocketBinding","text":"Option Type Default Description host str \"127.0.0.1\" Bind socket to this host. Use <code>'0.0.0.0'</code> to make the application available on your local network. port int 8000 Bind to a socket with this port. uds str \"\" Bind to a UNIX domain socket, e.g., <code>'/tmp/uvicorn.sock'</code>. fd int -1 Bind to socket from this file descriptor."},{"location":"3-Configuration/#development","title":"Development","text":"Option Type Default Description reload bool False Whether to enable auto-reload. reload_dirs list[str] [] Directories to watch for Python file changes. Default: empty list, which implies to watch the current directory."},{"location":"3-Configuration/#production","title":"Production","text":"Option Type Default Description workers int 0 Number of worker processes. Defaults to environment variable <code>$WEB_CONCURRENCY</code> or 1."},{"location":"3-Configuration/#logging","title":"Logging","text":"Option Type Default Description set_default_log_config bool True Whether to use the default  log configuration. log_config str \"\" Logging configuration file. Supports <code>dictConfig()</code> formats (.json, .yaml). log_level str \"info\" Log level (<code>'critical'</code>, <code>'error'</code>, <code>'warning'</code>, <code>'info'</code>, <code>'debug'</code>, <code>'trace'</code>). access_log bool True Whether to enable an access log without changing the log level. use_colors int -1 Enable/disable colorized log formatting."},{"location":"3-Configuration/#implementation","title":"Implementation","text":"Option Type Default Description loop str \"auto\" Event loop implementation (<code>'auto'</code>, <code>'asyncio'</code>, <code>'uvloop'</code>). http str \"auto\" HTTP protocol implementation (<code>'auto'</code>, <code>'h11'</code>, <code>'httptools'</code>). ws str \"auto\" WebSocket protocol implementation (<code>'auto'</code>, <code>'none'</code>, <code>'websockets'</code>, <code>'wsproto'</code>). ws_max_size int 16777216 Max WebSocket message size in bytes. ws_max_queue int 32 Max WebSocket incoming message queue length. ws_ping_interval float 20.0 WebSocket ping interval in seconds. ws_ping_timeout float 20.0 WebSocket ping timeout in seconds. lifespan str \"auto\" Lifespan protocol implementation (<code>'auto'</code>, <code>'on'</code>, <code>'off'</code>). h11_max_incomplete_event_size int 16384 Max bytes for buffering an incomplete event (h11)."},{"location":"3-Configuration/#applicationinterface","title":"ApplicationInterface","text":"Option Type Default Description interface str \"auto\" Select ASGI3, ASGI2, or WSGI as the application interface."},{"location":"3-Configuration/#http","title":"HTTP","text":"Option Type Default Description root_path str \"\" ASGI root path for submounted applications. proxy_headers bool True Enable <code>X-Forwarded-*</code> headers for remote address info. set_default_forwarded_allow_ips bool True Use the  default for <code>forwarded_allow_ips</code>. forwarded_allow_ips list[str] [] Trusted IPs for proxy headers. server_header bool True Enable the default <code>Server</code> header. date_header bool True Enable the default <code>Date</code> header."},{"location":"3-Configuration/#https","title":"HTTPS","text":"Option Type Default Description ssl_keyfile str \"\" SSL key file path. ssl_keyfile_password str \"\" Password for SSL key. ssl_certfile str \"\" SSL certificate file. ssl_version int ssl.PROTOCOL_TLS_SERVER SSL version. ssl_cert_reqs int ssl.CERT_NONE Whether client certificates are required. ssl_ca_certs str \"\" CA certificates file path. ssl_ciphers str \"TLSv1\" Ciphers to use."},{"location":"3-Configuration/#resourcelimits","title":"ResourceLimits","text":"Option Type Default Description limit_concurrency int -1 Max concurrent connections/tasks. limit_max_requests int -1 Max requests before terminating the process. backlog int 2048 Max connections to hold in backlog."},{"location":"3-Configuration/#timeouts","title":"Timeouts","text":"Option Type Default Description timeout_keep_alive int 5 Close Keep-Alive connections after timeout (seconds). timeout_graceful_shutdown int -1 Max seconds for graceful shutdown before termination."},{"location":"3-Configuration/#uvicorn","title":"Uvicorn","text":"<p>Collects all of the above sections.</p> Section Type Default Description application UvicornApplicationConfigSection default instance See Application. socket_binding UvicornSocketBindingConfigSection default instance See SocketBinding. development UvicornDevelopmentConfigSection default instance See Development. production UvicornProductionConfigSection default instance See Production. logging UvicornLoggingConfigSection default instance See Logging. implementation UvicornImplementationConfigSection default instance See Implementation. application_interface UvicornApplicationInterfaceConfigSection default instance See ApplicationInterface. http UvicornHTTPConfigSection default instance See HTTP. https UvicornHTTPSConfigSection default instance See HTTPS. resource_limits UvicornResourceLimitsConfigSection default instance See ResourceLimits. timeouts UvicornTimeoutsConfigSection default instance See Timeouts."},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#010-2025-01-22","title":"[0.1.0] - 2025-01-22","text":""},{"location":"CHANGELOG/#added-010","title":"Added 0.1.0","text":"<ul> <li>Configuration for uvicorn.</li> <li>Documentation.</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>uvicorn_configurable<ul> <li>_version</li> <li>config</li> </ul> </li> </ul>"},{"location":"reference/uvicorn_configurable/__init__/","title":"init","text":"<p>Entry point of the uvicorn_configurable library, collects all exportable items.</p>"},{"location":"reference/uvicorn_configurable/__init__/#uvicorn_configurable.UvicornConfigSection","title":"UvicornConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn.</p>"},{"location":"reference/uvicorn_configurable/__init__/#uvicorn_configurable.UvicornConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n\n    uvicorn_config_dict = (\n        self.application.as_uvicorn_config_dict()\n        | self.socket_binding.as_uvicorn_config_dict()\n        | self.development.as_uvicorn_config_dict()\n        | self.production.as_uvicorn_config_dict()\n        | self.logging.as_uvicorn_config_dict()\n        | self.implementation.as_uvicorn_config_dict()\n        | self.application_interface.as_uvicorn_config_dict()\n        | self.http.as_uvicorn_config_dict()\n        | self.https.as_uvicorn_config_dict()\n        | self.resource_limits.as_uvicorn_config_dict()\n        | self.timeouts.as_uvicorn_config_dict()\n    )\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/_version/","title":"_version","text":"<p>Version module, current version</p>"},{"location":"reference/uvicorn_configurable/config/","title":"config","text":"<p>Module that defines a ConfigSection for uvicorn</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornApplicationConfigSection","title":"UvicornApplicationConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to the application to serve.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornApplicationConfigSection.app","title":"app  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>app = ''\n</code></pre> <p>The ASGI application to run, in the format <code>'&lt;module&gt;:&lt;attribute&gt;'</code>. Set to '' if you supply the app instance. Default: ''.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornApplicationConfigSection.factory","title":"factory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>factory = False\n</code></pre> <p>Whether or not to treat app as an application factory, i.e. a () -&gt;  callable; default: False."},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornApplicationConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornApplicationConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornApplicationConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    if not self.app:\n        uvicorn_config_dict.pop(\"app\")\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornSocketBindingConfigSection","title":"UvicornSocketBindingConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to socket binding.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornSocketBindingConfigSection.host","title":"host  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>host = '127.0.0.1'\n</code></pre> <p>Bind socket to this host. Use '0.0.0.0' to make the application available on your local network. IPv6 addresses are supported, for example: '::'. Default: '127.0.0.1'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornSocketBindingConfigSection.port","title":"port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>port = 8000\n</code></pre> <p>Bind to a socket with this port. Default: 8000</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornSocketBindingConfigSection.uds","title":"uds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uds = ''\n</code></pre> <p>Bind to a UNIX domain socket, for example '/tmp/uvicorn.sock'. Useful if you want to run Uvicorn behind a reverse proxy. Set to '' if you don't want to use this. Default: ''.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornSocketBindingConfigSection.fd","title":"fd  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fd = -1\n</code></pre> <p>Bind to socket from this file descriptor. Useful if you want to run Uvicorn within a process manager. Set to a negative number if you don't want to use this. Default: -1.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornSocketBindingConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornSocketBindingConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornSocketBindingConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    if not self.uds:\n        uvicorn_config_dict.pop(\"uds\")\n    if self.fd &lt; 0:\n        uvicorn_config_dict.pop(\"fd\")\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornDevelopmentConfigSection","title":"UvicornDevelopmentConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to development.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornDevelopmentConfigSection.reload","title":"reload  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reload = False\n</code></pre> <p>Whether or not to enable auto-reload. uvicorn_configurable currently only supports reload for reload_dirs. Default: False.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornDevelopmentConfigSection.reload_dirs","title":"reload_dirs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reload_dirs = field(default_factory=lambda: [])\n</code></pre> <p>Specify which directories to watch for python file changes. If an empty list, then by default the whole current directory will be watched. Default: [].</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornDevelopmentConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornDevelopmentConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornDevelopmentConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    if not self.reload_dirs:\n        uvicorn_config_dict.pop(\"reload_dirs\")\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornProductionConfigSection","title":"UvicornProductionConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to production.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornProductionConfigSection.workers","title":"workers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>workers = 0\n</code></pre> <p>Use multiple worker processes. Set to 0 to obtain the uvicorn default, which is setting it to the $WEB_CONCURRENCY environment variable if available, or 1. Default: 0.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornProductionConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornProductionConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornProductionConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    if self.workers:\n        return asdict(self)\n    return {}\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornLoggingConfigSection","title":"UvicornLoggingConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to logging.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornLoggingConfigSection.set_default_log_config","title":"set_default_log_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>set_default_log_config = True\n</code></pre> <p>If True, the default LOG_CONFIG of uvicorn is set; if False, then self.log_config is set. Default: True</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornLoggingConfigSection.log_config","title":"log_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_config = ''\n</code></pre> <p>Logging configuration file. Options: dictConfig() formats: .json, .yaml. Any other format will be processed with fileConfig(). Set the formatters.default.use_colors and formatters.access.use_colors values to override the auto-detected behavior. If you wish to use a YAML file for your logging config, you will need to include PyYAML as a dependency for your project or install uvicorn with the [standard] optional extras. Set to '' in order to set the log_config to None. Default: ''.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornLoggingConfigSection.log_level","title":"log_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_level = 'info'\n</code></pre> <p>Sets the log level. Options: 'critical', 'error', 'warning', 'info', 'debug', 'trace'. Default: 'info'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornLoggingConfigSection.access_log","title":"access_log  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>access_log = True\n</code></pre> <p>Whether or not to have an access log, without changing log level. Default: True.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornLoggingConfigSection.use_colors","title":"use_colors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>use_colors = -1\n</code></pre> <p>Enable / disable colorized formatting of the log records. Valid values: -1, 0, 1. A value of -1 means do not set, in case this is not set it will be auto-detected. A value of 0 means disable and 1 is enable. This option is ignored if the --log-config CLI option is used. Default: -1 (do not set).</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornLoggingConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornLoggingConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornLoggingConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    uvicorn_config_dict.pop(\"set_default_log_config\")\n    if self.set_default_log_config:\n        uvicorn_config_dict.pop(\"log_config\")\n    else:\n        if not self.log_config:\n            uvicorn_config_dict[\"log_config\"] = None\n    if self.use_colors &lt; 0:\n        uvicorn_config_dict.pop(\"use_colors\")\n    else:\n        uvicorn_config_dict[\"use_colors\"] = self.use_colors != 0\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection","title":"UvicornImplementationConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to implementation.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.loop","title":"loop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>loop = 'auto'\n</code></pre> <p>Set the event loop implementation. The uvloop implementation provides greater performance, but is not compatible with Windows or PyPy. Options: 'auto', 'asyncio', 'uvloop'. Default: 'auto'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.http","title":"http  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>http = 'auto'\n</code></pre> <p>Set the HTTP protocol implementation. The httptools implementation provides greater performance, but is not compatible with PyPy. Options: 'auto', 'h11', 'httptools'. Default: 'auto'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.ws","title":"ws  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ws = 'auto'\n</code></pre> <p>Sets the WebSockets protocol implementation. Either of the websockets and wsproto packages are supported. Use 'none' to ignore all websocket requests. Options: 'auto', 'none', 'websockets', 'wsproto'. Default: 'auto'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.ws_max_size","title":"ws_max_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ws_max_size = 16777216\n</code></pre> <p>Sets the WebSockets max message size, in bytes. Please note that this can be used only with the default websockets protocol. Default: 16777216.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.ws_max_queue","title":"ws_max_queue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ws_max_queue = 32\n</code></pre> <p>Sets the maximum length of the WebSocket incoming message queue. Please note that this can be used only with the default websockets protocol. Default: 32.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.ws_ping_interval","title":"ws_ping_interval  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ws_ping_interval = 20.0\n</code></pre> <p>Sets the WebSockets ping interval, in seconds. Please note that this can be used only with the default websockets protocol. Default: 20.0.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.ws_ping_timeout","title":"ws_ping_timeout  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ws_ping_timeout = 20.0\n</code></pre> <p>Sets the WebSockets ping timeout, in seconds. Please note that this can be used only with the default websockets protocol. Default: 20.0.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.lifespan","title":"lifespan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lifespan = 'auto'\n</code></pre> <p>Sets the Lifespan protocol implementation. Options: 'auto', 'on', 'off'. Default: 'auto'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.h11_max_incomplete_event_size","title":"h11_max_incomplete_event_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>h11_max_incomplete_event_size = 16384\n</code></pre> <p>Sets the maximum number of bytes to buffer of an incomplete event. Only available for h11 HTTP protocol implementation. Default: '16384' (16 KB).</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornImplementationConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornImplementationConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornImplementationConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    return asdict(self)\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornApplicationInterfaceConfigSection","title":"UvicornApplicationInterfaceConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to application interface.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornApplicationInterfaceConfigSection.interface","title":"interface  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>interface = 'auto'\n</code></pre> <p>Select ASGI3, ASGI2, or WSGI as the application interface. Note that WSGI mode always disables WebSocket support, as it is not supported by the WSGI interface. Options: 'auto', 'asgi3', 'asgi2', 'wsgi'. Warning:  Uvicorn's native WSGI implementation is deprecated, you should switch to a2wsgi (pip install a2wsgi). Default: 'auto'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornApplicationInterfaceConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornApplicationInterfaceConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornApplicationInterfaceConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    return asdict(self)\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection","title":"UvicornHTTPConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to HTTP.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection.root_path","title":"root_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>root_path = ''\n</code></pre> <p>Set the ASGI root_path for applications submounted below a given URL path; default: ''.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection.proxy_headers","title":"proxy_headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>proxy_headers = True\n</code></pre> <p>Whether or not to enable X-Forwarded-Proto, X-Forwarded-For to populate remote address info. Default: True, but is restricted to only trusting connecting IPs in the forwarded-allow-ips configuration.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection.set_default_forwarded_allow_ips","title":"set_default_forwarded_allow_ips  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>set_default_forwarded_allow_ips = True\n</code></pre> <p>Whether or not to appy the uvicorn default for 'forwarded_allow_ips', which equals the $FORWARDED_ALLOW_IPS environment variable if available, or '127.0.0.1'. Default: True. The field 'forwarded_allow_ips' is used only if this field is set to False.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection.forwarded_allow_ips","title":"forwarded_allow_ips  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>forwarded_allow_ips = field(default_factory=lambda: [])\n</code></pre> <p>Comma separated list of IP Addresses, IP Networks, or literals (e.g. UNIX Socket path) to trust with proxy headers. The literal '*' means trust everything. This setting is applied only if 'set_default_forwarded_allow_ips' is False.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection.server_header","title":"server_header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>server_header = True\n</code></pre> <p>Whether or not to enable default Server header; default: True.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection.date_header","title":"date_header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date_header = True\n</code></pre> <p>Whether or not to enable default Date header; default: True. Note: This flag doesn't have effect on the websockets implementation.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornHTTPConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornHTTPConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    uvicorn_config_dict.pop(\"set_default_forwarded_allow_ips\")\n    if self.set_default_forwarded_allow_ips:\n        uvicorn_config_dict.pop(\"forwarded_allow_ips\")\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection","title":"UvicornHTTPSConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to HTTPS. To understand more about the SSL context options, please refer to the Python documentation.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.ssl_keyfile","title":"ssl_keyfile  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ssl_keyfile = ''\n</code></pre> <p>Pathlike string that specifies where to find the SSL key file; default: '', which implies not set.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.ssl_keyfile_password","title":"ssl_keyfile_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ssl_keyfile_password = ''\n</code></pre> <p>The password to decrypt the ssl key; default: '', which implies not set.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.ssl_certfile","title":"ssl_certfile  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ssl_certfile = ''\n</code></pre> <p>The SSL certificate file.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.ssl_version","title":"ssl_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ssl_version = PROTOCOL_TLS_SERVER\n</code></pre> <p>The SSL version to use; default: ssl.PROTOCOL_TLS_SERVER.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.ssl_cert_reqs","title":"ssl_cert_reqs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ssl_cert_reqs = CERT_NONE\n</code></pre> <p>Whether client certificate is required; default: ssl.CERT_NONE.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.ssl_ca_certs","title":"ssl_ca_certs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ssl_ca_certs = ''\n</code></pre> <p>The CA certificates file; default: '', which implies not set.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.ssl_ciphers","title":"ssl_ciphers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ssl_ciphers = 'TLSv1'\n</code></pre> <p>The ciphers to use; default: 'TLSv1'.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornHTTPSConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornHTTPSConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornHTTPSConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    if not self.ssl_keyfile:\n        uvicorn_config_dict.pop(\"ssl_keyfile\")\n    if not self.ssl_keyfile_password:\n        uvicorn_config_dict.pop(\"ssl_keyfile_password\")\n    if not self.ssl_certfile:\n        uvicorn_config_dict.pop(\"ssl_certfile\")\n    if not self.ssl_ca_certs:\n        uvicorn_config_dict.pop(\"ssl_ca_certs\")\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornResourceLimitsConfigSection","title":"UvicornResourceLimitsConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to resource limits.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornResourceLimitsConfigSection.limit_concurrency","title":"limit_concurrency  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>limit_concurrency = -1\n</code></pre> <p>Maximum number of concurrent connections or tasks to allow, before issuing HTTP 503 responses. Useful for ensuring known memory usage patterns even under over-resourced loads. Default: -1, which implies not set.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornResourceLimitsConfigSection.limit_max_requests","title":"limit_max_requests  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>limit_max_requests = -1\n</code></pre> <p>Maximum number of requests to service before terminating the process. Useful when running together with a process manager, for preventing memory leaks from impacting long-running processes. Default: -1, which implies not set.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornResourceLimitsConfigSection.backlog","title":"backlog  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlog = 2048\n</code></pre> <p>Maximum number of connections to hold in backlog. Relevant for heavy incoming traffic. Default: 2048.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornResourceLimitsConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornResourceLimitsConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornResourceLimitsConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    if self.limit_concurrency == -1:\n        uvicorn_config_dict.pop(\"limit_concurrency\")\n    if self.limit_max_requests == -1:\n        uvicorn_config_dict.pop(\"limit_max_requests\")\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornTimeoutsConfigSection","title":"UvicornTimeoutsConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn, settings related to timeouts.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornTimeoutsConfigSection.timeout_keep_alive","title":"timeout_keep_alive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>timeout_keep_alive = 5\n</code></pre> <p>Close Keep-Alive connections if no new data is received within this timeout. Default: 5.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornTimeoutsConfigSection.timeout_graceful_shutdown","title":"timeout_graceful_shutdown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>timeout_graceful_shutdown = -1\n</code></pre> <p>Maximum number of seconds to wait for graceful shutdown. After this timeout, the server will start terminating requests. Default: -1, which implies not set.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornTimeoutsConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornTimeoutsConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornTimeoutsConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n    uvicorn_config_dict = asdict(self)\n    if self.timeout_graceful_shutdown == -1:\n        uvicorn_config_dict.pop(\"timeout_graceful_shutdown\")\n    return uvicorn_config_dict\n</code></pre>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornConfigSection","title":"UvicornConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for uvicorn.</p>"},{"location":"reference/uvicorn_configurable/config/#uvicorn_configurable.config.UvicornConfigSection.as_uvicorn_config_dict","title":"as_uvicorn_config_dict","text":"<pre><code>as_uvicorn_config_dict()\n</code></pre> <p>Converts UvicornConfigSection to a dictionary suitable for Uvicorn configuration.</p> Source code in <code>src/uvicorn_configurable/config.py</code> <pre><code>def as_uvicorn_config_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Converts UvicornConfigSection to a dictionary suitable for Uvicorn configuration.\"\"\"\n\n    uvicorn_config_dict = (\n        self.application.as_uvicorn_config_dict()\n        | self.socket_binding.as_uvicorn_config_dict()\n        | self.development.as_uvicorn_config_dict()\n        | self.production.as_uvicorn_config_dict()\n        | self.logging.as_uvicorn_config_dict()\n        | self.implementation.as_uvicorn_config_dict()\n        | self.application_interface.as_uvicorn_config_dict()\n        | self.http.as_uvicorn_config_dict()\n        | self.https.as_uvicorn_config_dict()\n        | self.resource_limits.as_uvicorn_config_dict()\n        | self.timeouts.as_uvicorn_config_dict()\n    )\n    return uvicorn_config_dict\n</code></pre>"}]}